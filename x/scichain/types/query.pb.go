// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scichain/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetProfileRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetProfileRequest) Reset()         { *m = QueryGetProfileRequest{} }
func (m *QueryGetProfileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileRequest) ProtoMessage()    {}
func (*QueryGetProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{0}
}
func (m *QueryGetProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileRequest.Merge(m, src)
}
func (m *QueryGetProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileRequest proto.InternalMessageInfo

func (m *QueryGetProfileRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetProfileResponse struct {
	Profile *Profile `protobuf:"bytes,1,opt,name=Profile,proto3" json:"Profile,omitempty"`
}

func (m *QueryGetProfileResponse) Reset()         { *m = QueryGetProfileResponse{} }
func (m *QueryGetProfileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProfileResponse) ProtoMessage()    {}
func (*QueryGetProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{1}
}
func (m *QueryGetProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProfileResponse.Merge(m, src)
}
func (m *QueryGetProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProfileResponse proto.InternalMessageInfo

func (m *QueryGetProfileResponse) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

type QueryAllProfileRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProfileRequest) Reset()         { *m = QueryAllProfileRequest{} }
func (m *QueryAllProfileRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProfileRequest) ProtoMessage()    {}
func (*QueryAllProfileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{2}
}
func (m *QueryAllProfileRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProfileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProfileRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProfileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProfileRequest.Merge(m, src)
}
func (m *QueryAllProfileRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProfileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProfileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProfileRequest proto.InternalMessageInfo

func (m *QueryAllProfileRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProfileResponse struct {
	Profile    []*Profile          `protobuf:"bytes,1,rep,name=Profile,proto3" json:"Profile,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProfileResponse) Reset()         { *m = QueryAllProfileResponse{} }
func (m *QueryAllProfileResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProfileResponse) ProtoMessage()    {}
func (*QueryAllProfileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{3}
}
func (m *QueryAllProfileResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProfileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProfileResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProfileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProfileResponse.Merge(m, src)
}
func (m *QueryAllProfileResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProfileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProfileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProfileResponse proto.InternalMessageInfo

func (m *QueryAllProfileResponse) GetProfile() []*Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *QueryAllProfileResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetArticleRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetArticleRequest) Reset()         { *m = QueryGetArticleRequest{} }
func (m *QueryGetArticleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetArticleRequest) ProtoMessage()    {}
func (*QueryGetArticleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{4}
}
func (m *QueryGetArticleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetArticleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetArticleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetArticleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetArticleRequest.Merge(m, src)
}
func (m *QueryGetArticleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetArticleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetArticleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetArticleRequest proto.InternalMessageInfo

func (m *QueryGetArticleRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetArticleResponse struct {
	Article *Article `protobuf:"bytes,1,opt,name=Article,proto3" json:"Article,omitempty"`
}

func (m *QueryGetArticleResponse) Reset()         { *m = QueryGetArticleResponse{} }
func (m *QueryGetArticleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetArticleResponse) ProtoMessage()    {}
func (*QueryGetArticleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{5}
}
func (m *QueryGetArticleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetArticleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetArticleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetArticleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetArticleResponse.Merge(m, src)
}
func (m *QueryGetArticleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetArticleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetArticleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetArticleResponse proto.InternalMessageInfo

func (m *QueryGetArticleResponse) GetArticle() *Article {
	if m != nil {
		return m.Article
	}
	return nil
}

type QueryAllArticleRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllArticleRequest) Reset()         { *m = QueryAllArticleRequest{} }
func (m *QueryAllArticleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllArticleRequest) ProtoMessage()    {}
func (*QueryAllArticleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{6}
}
func (m *QueryAllArticleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllArticleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllArticleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllArticleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllArticleRequest.Merge(m, src)
}
func (m *QueryAllArticleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllArticleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllArticleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllArticleRequest proto.InternalMessageInfo

func (m *QueryAllArticleRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllArticleResponse struct {
	Article    []*Article          `protobuf:"bytes,1,rep,name=Article,proto3" json:"Article,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllArticleResponse) Reset()         { *m = QueryAllArticleResponse{} }
func (m *QueryAllArticleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllArticleResponse) ProtoMessage()    {}
func (*QueryAllArticleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_890dbf90467d7407, []int{7}
}
func (m *QueryAllArticleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllArticleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllArticleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllArticleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllArticleResponse.Merge(m, src)
}
func (m *QueryAllArticleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllArticleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllArticleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllArticleResponse proto.InternalMessageInfo

func (m *QueryAllArticleResponse) GetArticle() []*Article {
	if m != nil {
		return m.Article
	}
	return nil
}

func (m *QueryAllArticleResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetProfileRequest)(nil), "paranauerj.scichain.scichain.QueryGetProfileRequest")
	proto.RegisterType((*QueryGetProfileResponse)(nil), "paranauerj.scichain.scichain.QueryGetProfileResponse")
	proto.RegisterType((*QueryAllProfileRequest)(nil), "paranauerj.scichain.scichain.QueryAllProfileRequest")
	proto.RegisterType((*QueryAllProfileResponse)(nil), "paranauerj.scichain.scichain.QueryAllProfileResponse")
	proto.RegisterType((*QueryGetArticleRequest)(nil), "paranauerj.scichain.scichain.QueryGetArticleRequest")
	proto.RegisterType((*QueryGetArticleResponse)(nil), "paranauerj.scichain.scichain.QueryGetArticleResponse")
	proto.RegisterType((*QueryAllArticleRequest)(nil), "paranauerj.scichain.scichain.QueryAllArticleRequest")
	proto.RegisterType((*QueryAllArticleResponse)(nil), "paranauerj.scichain.scichain.QueryAllArticleResponse")
}

func init() { proto.RegisterFile("scichain/query.proto", fileDescriptor_890dbf90467d7407) }

var fileDescriptor_890dbf90467d7407 = []byte{
	// 492 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x4f, 0x6b, 0xd4, 0x40,
	0x18, 0xc6, 0x77, 0xb6, 0x56, 0x61, 0x04, 0x0f, 0x83, 0x54, 0x59, 0x4a, 0x90, 0x40, 0x6d, 0x29,
	0x3a, 0x43, 0x57, 0x3d, 0xcb, 0x2a, 0x58, 0xbc, 0xd5, 0xf5, 0xd6, 0x93, 0x93, 0xec, 0x98, 0x8e,
	0xa4, 0x99, 0x34, 0x33, 0x11, 0x8b, 0x78, 0xf1, 0x13, 0x08, 0x7e, 0x04, 0x2f, 0xe2, 0x17, 0xf0,
	0x2b, 0x78, 0x2c, 0x78, 0xf1, 0x28, 0xbb, 0x7e, 0x10, 0xe9, 0xfc, 0x49, 0xb2, 0x49, 0x59, 0x27,
	0xa2, 0xb7, 0xe5, 0xe5, 0x7d, 0xde, 0xf9, 0xcd, 0xf3, 0xcc, 0xbb, 0x81, 0xd7, 0x65, 0xcc, 0xe3,
	0x23, 0xca, 0x33, 0x72, 0x52, 0xb2, 0xe2, 0x14, 0xe7, 0x85, 0x50, 0x02, 0x6d, 0xe6, 0xb4, 0xa0,
	0x19, 0x2d, 0x59, 0xf1, 0x0a, 0xbb, 0x86, 0xea, 0xc7, 0x68, 0x33, 0x11, 0x22, 0x49, 0x19, 0xa1,
	0x39, 0x27, 0x34, 0xcb, 0x84, 0xa2, 0x8a, 0x8b, 0x4c, 0x1a, 0xed, 0x68, 0x37, 0x16, 0xf2, 0x58,
	0x48, 0x12, 0x51, 0xc9, 0xcc, 0x50, 0xf2, 0x7a, 0x2f, 0x62, 0x8a, 0xee, 0x91, 0x9c, 0x26, 0x3c,
	0xd3, 0xcd, 0xb6, 0x77, 0xa3, 0x3a, 0x3d, 0x2f, 0xc4, 0x4b, 0x9e, 0xb2, 0x4e, 0x9d, 0x16, 0x8a,
	0xc7, 0xae, 0x1e, 0xee, 0xc0, 0x8d, 0x67, 0xe7, 0x13, 0xf7, 0x99, 0x3a, 0x30, 0x82, 0x29, 0x3b,
	0x29, 0x99, 0x54, 0xe8, 0x1a, 0x1c, 0xf2, 0xd9, 0x4d, 0x70, 0x0b, 0xec, 0x5c, 0x9a, 0x0e, 0xf9,
	0x2c, 0x3c, 0x84, 0x37, 0x3a, 0x9d, 0x32, 0x17, 0x99, 0x64, 0xe8, 0x21, 0xbc, 0x62, 0x4b, 0xba,
	0xff, 0xea, 0x78, 0x0b, 0xaf, 0xba, 0x2e, 0x76, 0x7a, 0xa7, 0x0a, 0x5f, 0x58, 0x8a, 0x49, 0x9a,
	0xb6, 0x28, 0x9e, 0x40, 0x58, 0xdf, 0xd1, 0x4e, 0xbf, 0x8d, 0x8d, 0x21, 0xf8, 0xdc, 0x10, 0x6c,
	0x5c, 0xb6, 0x86, 0xe0, 0x03, 0x9a, 0x38, 0xed, 0xb4, 0xa1, 0x0c, 0x3f, 0x01, 0x8b, 0xdf, 0x3c,
	0xe2, 0x22, 0xfc, 0xb5, 0xfe, 0xf8, 0x68, 0x7f, 0x09, 0x72, 0xa8, 0x21, 0xb7, 0xff, 0x08, 0x69,
	0x4e, 0x5f, 0xa2, 0x6c, 0xa4, 0x31, 0x31, 0x31, 0x79, 0xa4, 0x51, 0x75, 0xd6, 0xd7, 0xb1, 0x25,
	0xbf, 0x34, 0x9c, 0xde, 0xa9, 0x9a, 0x69, 0xb4, 0x28, 0xfe, 0x47, 0x1a, 0x2b, 0xf1, 0xd7, 0xfa,
	0xe3, 0xff, 0xb3, 0x34, 0xc6, 0x5f, 0xd7, 0xe1, 0xba, 0xa6, 0x44, 0x5f, 0x40, 0xf5, 0x44, 0xd0,
	0xfd, 0xd5, 0x38, 0x17, 0x6f, 0xd3, 0xe8, 0x41, 0x4f, 0x95, 0xc1, 0x09, 0xc7, 0xef, 0xbf, 0xff,
	0xfa, 0x38, 0xbc, 0x83, 0x76, 0x49, 0x2d, 0x27, 0xd5, 0x2a, 0xb7, 0x77, 0x9d, 0xbc, 0xe5, 0xb3,
	0x77, 0xe8, 0x33, 0x80, 0xd0, 0xce, 0x99, 0xa4, 0xa9, 0x17, 0x6f, 0x67, 0xef, 0xbc, 0x78, 0xbb,
	0xab, 0x14, 0xde, 0xd5, 0xbc, 0xdb, 0x68, 0xcb, 0x8b, 0x57, 0xfb, 0xea, 0x62, 0xf3, 0xf4, 0x75,
	0xf9, 0x45, 0xfa, 0xfa, 0xda, 0x7a, 0x64, 0xbe, 0xbe, 0xda, 0xff, 0xca, 0xda, 0x57, 0x3b, 0xa7,
	0x87, 0xaf, 0x7f, 0xc1, 0xdb, 0x5d, 0x0a, 0x5f, 0x5f, 0x2d, 0xef, 0xa3, 0xa7, 0xdf, 0xe6, 0x01,
	0x38, 0x9b, 0x07, 0xe0, 0xe7, 0x3c, 0x00, 0x1f, 0x16, 0xc1, 0xe0, 0x6c, 0x11, 0x0c, 0x7e, 0x2c,
	0x82, 0xc1, 0x21, 0x49, 0xb8, 0x3a, 0x2a, 0x23, 0x1c, 0x8b, 0xe3, 0xe6, 0xa8, 0xe7, 0x31, 0x7f,
	0xac, 0x27, 0xbc, 0xa9, 0x87, 0xa9, 0xd3, 0x9c, 0xc9, 0xe8, 0xb2, 0xfe, 0x4e, 0xdc, 0xfb, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0xe5, 0x1d, 0x6e, 0x79, 0xd7, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a profile by id.
	Profile(ctx context.Context, in *QueryGetProfileRequest, opts ...grpc.CallOption) (*QueryGetProfileResponse, error)
	// Queries a list of profile items.
	ProfileAll(ctx context.Context, in *QueryAllProfileRequest, opts ...grpc.CallOption) (*QueryAllProfileResponse, error)
	// Queries a article by id.
	Article(ctx context.Context, in *QueryGetArticleRequest, opts ...grpc.CallOption) (*QueryGetArticleResponse, error)
	// Queries a list of article items.
	ArticleAll(ctx context.Context, in *QueryAllArticleRequest, opts ...grpc.CallOption) (*QueryAllArticleResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Profile(ctx context.Context, in *QueryGetProfileRequest, opts ...grpc.CallOption) (*QueryGetProfileResponse, error) {
	out := new(QueryGetProfileResponse)
	err := c.cc.Invoke(ctx, "/paranauerj.scichain.scichain.Query/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProfileAll(ctx context.Context, in *QueryAllProfileRequest, opts ...grpc.CallOption) (*QueryAllProfileResponse, error) {
	out := new(QueryAllProfileResponse)
	err := c.cc.Invoke(ctx, "/paranauerj.scichain.scichain.Query/ProfileAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Article(ctx context.Context, in *QueryGetArticleRequest, opts ...grpc.CallOption) (*QueryGetArticleResponse, error) {
	out := new(QueryGetArticleResponse)
	err := c.cc.Invoke(ctx, "/paranauerj.scichain.scichain.Query/Article", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ArticleAll(ctx context.Context, in *QueryAllArticleRequest, opts ...grpc.CallOption) (*QueryAllArticleResponse, error) {
	out := new(QueryAllArticleResponse)
	err := c.cc.Invoke(ctx, "/paranauerj.scichain.scichain.Query/ArticleAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a profile by id.
	Profile(context.Context, *QueryGetProfileRequest) (*QueryGetProfileResponse, error)
	// Queries a list of profile items.
	ProfileAll(context.Context, *QueryAllProfileRequest) (*QueryAllProfileResponse, error)
	// Queries a article by id.
	Article(context.Context, *QueryGetArticleRequest) (*QueryGetArticleResponse, error)
	// Queries a list of article items.
	ArticleAll(context.Context, *QueryAllArticleRequest) (*QueryAllArticleResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Profile(ctx context.Context, req *QueryGetProfileRequest) (*QueryGetProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (*UnimplementedQueryServer) ProfileAll(ctx context.Context, req *QueryAllProfileRequest) (*QueryAllProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileAll not implemented")
}
func (*UnimplementedQueryServer) Article(ctx context.Context, req *QueryGetArticleRequest) (*QueryGetArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Article not implemented")
}
func (*UnimplementedQueryServer) ArticleAll(ctx context.Context, req *QueryAllArticleRequest) (*QueryAllArticleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArticleAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranauerj.scichain.scichain.Query/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Profile(ctx, req.(*QueryGetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProfileAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProfileAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranauerj.scichain.scichain.Query/ProfileAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProfileAll(ctx, req.(*QueryAllProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Article_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Article(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranauerj.scichain.scichain.Query/Article",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Article(ctx, req.(*QueryGetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ArticleAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ArticleAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/paranauerj.scichain.scichain.Query/ArticleAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ArticleAll(ctx, req.(*QueryAllArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "paranauerj.scichain.scichain.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _Query_Profile_Handler,
		},
		{
			MethodName: "ProfileAll",
			Handler:    _Query_ProfileAll_Handler,
		},
		{
			MethodName: "Article",
			Handler:    _Query_Article_Handler,
		},
		{
			MethodName: "ArticleAll",
			Handler:    _Query_ArticleAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scichain/query.proto",
}

func (m *QueryGetProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profile != nil {
		{
			size, err := m.Profile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProfileRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProfileRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProfileRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProfileResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProfileResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProfileResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Profile) > 0 {
		for iNdEx := len(m.Profile) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profile[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetArticleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetArticleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetArticleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetArticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetArticleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetArticleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Article != nil {
		{
			size, err := m.Article.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllArticleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllArticleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllArticleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllArticleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllArticleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllArticleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Article) > 0 {
		for iNdEx := len(m.Article) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Article[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profile != nil {
		l = m.Profile.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProfileRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProfileResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profile) > 0 {
		for _, e := range m.Profile {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetArticleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetArticleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Article != nil {
		l = m.Article.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllArticleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllArticleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Article) > 0 {
		for _, e := range m.Article {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profile == nil {
				m.Profile = &Profile{}
			}
			if err := m.Profile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProfileRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProfileRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProfileRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProfileResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProfileResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProfileResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profile = append(m.Profile, &Profile{})
			if err := m.Profile[len(m.Profile)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetArticleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetArticleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetArticleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetArticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetArticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetArticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Article == nil {
				m.Article = &Article{}
			}
			if err := m.Article.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllArticleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllArticleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllArticleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllArticleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllArticleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllArticleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Article", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Article = append(m.Article, &Article{})
			if err := m.Article[len(m.Article)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
